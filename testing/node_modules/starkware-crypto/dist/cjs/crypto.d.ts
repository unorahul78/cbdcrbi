import BN from 'bn.js';
import * as RSV from 'rsv-signature';
import * as elliptic from 'elliptic';
import { Token, KeyPair, MessageParams, Signature, SignatureInput } from './types';
export declare const prime: BN;
export declare const order: BN;
export declare const secpOrder: BN;
export declare const ec: elliptic.ec;
export declare const constantPoints: any[];
export declare const shiftPoint: any;
export declare function getAccountPath(layer: string, application: string, ethereumAddress: string, index: string): string;
export declare function getKeyPairFromPath(mnemonic: string, path: string): KeyPair;
export declare function getKeyPair(privateKey: string): KeyPair;
export declare function getKeyPairFromPublicKey(publicKey: string): KeyPair;
export declare function getPrivate(keyPair: KeyPair): string;
export declare function getPublic(keyPair: KeyPair, compressed?: boolean): string;
export declare function getStarkPublicKey(keyPair: KeyPair): string;
export declare function getXCoordinate(publicKey: string): string;
export declare function getYCoordinate(publicKey: string): string;
export declare function hashTokenId(token: Token): string;
export declare function hashMessage(w1: string, w2: string, w3: string): any;
export declare function deserializeMessage(serialized: string): MessageParams;
export declare function serializeMessage(instructionTypeBn: BN, vault0Bn: BN, vault1Bn: BN, amount0Bn: BN, amount1Bn: BN, nonceBn: BN, expirationTimestampBn: BN): string;
export declare function formatMessage(instruction: 'transfer' | 'order', vault0: string, vault1: string, amount0: string, amount1: string, nonce: string, expirationTimestamp: string): string;
export declare function getLimitOrderMsg(vaultSell: string, vaultBuy: string, amountSell: string, amountBuy: string, tokenSell: Token, tokenBuy: Token, nonce: string, expirationTimestamp: string): string;
export declare function getTransferMsg(amount: string, nonce: string, senderVaultId: string, token: Token, receiverVaultId: string, receiverPublicKey: string, expirationTimestamp: string): string;
export declare function sign(keyPair: KeyPair, msg: string): Signature;
export declare function verify(keyPair: KeyPair, msg: string, sig: SignatureInput): boolean;
export declare function compress(publicKey: string): string;
export declare function decompress(publicKey: string): string;
export declare function verifyStarkPublicKey(starkPublicKey: string, msg: string, sig: SignatureInput): boolean;
export declare const exportRecoveryParam: typeof RSV.exportRecoveryParam;
export declare const importRecoveryParam: typeof RSV.importRecoveryParam;
export declare const serializeSignature: typeof RSV.serializeSignature;
export declare const deserializeSignature: typeof RSV.deserializeSignature;
//# sourceMappingURL=crypto.d.ts.map