export interface AccountParams {
    layer: string;
    application: string;
    index: string;
}
export interface ETHTokenData {
    quantum: string;
}
export interface ERC20TokenData {
    quantum: string;
    tokenAddress: string;
}
export interface ERC721TokenData {
    tokenId: string;
    tokenAddress: string;
}
export declare type TokenTypes = 'ETH' | 'ERC20' | 'ERC721';
export declare type TokenData = ETHTokenData | ERC20TokenData | ERC721TokenData;
export interface Token {
    type: TokenTypes;
    data: TokenData;
}
export interface TransferParams {
    starkPublicKey: string;
    vaultId: string;
}
export interface OrderParams {
    vaultId: string;
    token: Token;
    quantizedAmount: string;
}
export declare namespace MethodParams {
    type StarkAccountParams = {
        layer: string;
        application: string;
        index: string;
    };
    type StarkRegisterParams = {
        contractAddress: string;
        starkPublicKey: string;
        operatorSignature: string;
    };
    type StarkDepositParams = {
        contractAddress: string;
        starkPublicKey: string;
        quantizedAmount: string;
        token: Token;
        vaultId: string;
    };
    type StarkDepositCancelParams = {
        contractAddress: string;
        starkPublicKey: string;
        token: Token;
        vaultId: string;
    };
    type StarkDepositReclaimParams = {
        contractAddress: string;
        starkPublicKey: string;
        token: Token;
        vaultId: string;
    };
    type StarkTransferParams = {
        from: TransferParams;
        to: TransferParams;
        token: Token;
        quantizedAmount: string;
        nonce: string;
        expirationTimestamp: string;
    };
    type StarkCreateOrderParams = {
        starkPublicKey: string;
        sell: OrderParams;
        buy: OrderParams;
        nonce: string;
        expirationTimestamp: string;
    };
    type StarkWithdrawalParams = {
        contractAddress: string;
        starkPublicKey: string;
        token: Token;
    };
    type StarkFullWithdrawalParams = {
        contractAddress: string;
        starkPublicKey: string;
        vaultId: string;
    };
    type StarkFreezeParams = {
        contractAddress: string;
        starkPublicKey: string;
        vaultId: string;
    };
    type StarkVerifyEscapeParams = {
        contractAddress: string;
        starkPublicKey: string;
        proof: string[];
    };
    type StarkEscapeParams = {
        contractAddress: string;
        starkPublicKey: string;
        vaultId: string;
        token: Token;
        quantizedAmount: string;
    };
}
export declare namespace MethodResults {
    type StarkAccountResult = {
        starkPublicKey: string;
    };
    type StarkRegisterResult = {
        txhash: string;
    };
    type StarkDepositResult = {
        txhash: string;
    };
    type StarkDepositCancelResult = {
        txhash: string;
    };
    type StarkDepositReclaimResult = {
        txhash: string;
    };
    type StarkTransferResult = {
        starkSignature: string;
    };
    type StarkCreateOrderResult = {
        starkSignature: string;
    };
    type StarkWithdrawalResult = {
        txhash: string;
    };
    type StarkFullWithdrawalResult = {
        txhash: string;
    };
    type StarkFreezeResult = {
        txhash: string;
    };
    type StarkVerifyEscapeResult = {
        txhash: string;
    };
    type StarkEscapeResult = {
        txhash: string;
    };
}
//# sourceMappingURL=index.d.ts.map